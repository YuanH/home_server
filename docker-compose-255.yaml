services:
  # jellyfin:
  #   image: jellyfin/jellyfin:latest
  #   container_name: jellyfin
  #   restart: unless-stopped
  #   volumes:
  #     # This directory will store Jellyfin config and metadata
  #     - ./config/jellyfin:/config
  #     - ./cache:/cache
  #     - ${COMMON_PATH}/qbittorrent/downloads:/data/media_downloads
  #     - ${COMMON_PATH}:/data
  #     # - type: bind
  #     #   source: ${COMMON_PATH}/media/movies
  #     #   target: /media/movies
  #     # - type: bind
  #     #   source: ${COMMON_PATH}/media/tv
  #     #   target: /media/tv
  #     # - type: bind
  #     #   source: ${COMMON_PATH}/media/ram
  #     #   target: /media/ram

  #   environment:
  #     - TZ=America/New_York
  #     - JELLYFIN_PublishedServerUrl=https://a5luan.org
  #     - PUID=0
  #     - PGID=0

  #   ports:
  #     - "8096:8096"
  #     - "8920:8920"

  # caddy:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: caddy
  #   restart: unless-stopped
  #   # Expose standard HTTP and HTTPS ports on the host
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     # Make sure you have a Caddyfile that uses DNS challenge with Cloudflare
  #     - ./Caddyfile:/etc/caddy/Caddyfile:ro
  #     - ./caddy_data:/data
  #     - ./caddy_config:/config
  #   environment:
  #     # Replace with your own token
  #     CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
  #   depends_on:
  #     - jellyfin

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflare-tunnel
    command: tunnel run
    restart: unless-stopped
    ports:
      - "20241:20241"
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - WEBUI_PORT=8080
      - PUID=0
      - PGID=0
      - TZ=${TZ}
      # - DOCKER_MODS=ghcr.io/gabe565/linuxserver-mod-vuetorrent
    volumes:
      - ${COMMON_PATH}:/data
      - ./config/qbittorrent:/config
      - ${COMMON_PATH}/qbittorrent/downloads:/downloads
    ports:
      - 8080:8080
      - 6881:6881
      - 6881:6881/udp
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TZ}
    volumes:
      - ./config/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped
  prowlarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: prowlarr-exporter
    command: ["prowlarr"]
    environment:
      PORT: 9710
      URL: "http://prowlarr:9696" # or; http://prowlarr:8080
      APIKEY: ${PROWLARR_API_KEY}
      # PROWLARR__BACKFILL: true # optional
      # PROWLARR__BACKFILL_SINCE_DATE: "2023-03-01" # optional
#    networks:
#     - your_custom_network # optional
    ports:
     - "9710:9710"
    restart: unless-stopped

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TZ}
    volumes:
      - ${COMMON_PATH}:/data
      - ${COMMON_PATH}/media/tv:/tv
      - ./config/sonarr:/config
      # - ${COMMON_PATH}/qbittorrent/downloads:/downloads
      # - ${COMMON_PATH}/usenet/downloads:/usenet-downloads
      # - ${COMMON_PATH}/usenet/incomplete:/usenet-incomplete-downloads
    ports:
      - 8989:8989
    restart: unless-stopped
  sonarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: sonarr-exporter
    command: ["sonarr"]
    environment:
      PORT: 9707
      URL: "http://sonarr:8989" 
      APIKEY: ${SONARR_API_KEY}
#    networks:
#    - your_custom_network # optional
    ports:
      - "9707:9707"
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TZ}
    volumes:
      - ${COMMON_PATH}:/data
      - ${COMMON_PATH}/media/movies:/movies
      - ./config/radarr:/config
      # - ${COMMON_PATH}/qbittorrent/downloads:/downloads
      # - ${COMMON_PATH}/usenet/downloads:/usenet-downloads
      # - ${COMMON_PATH}/usenet/incomplete:/usenet-incomplete-downloads
    ports:
      - 7878:7878
    restart: unless-stopped
  radarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: radarr-exporter
    command: ["radarr"]
    environment:
      PORT: 9708
      URL: "http://radarr:7878"
      APIKEY: ${RADARR_API_KEY}
#    networks:
#    - your_custom_network # optional
    ports:
      - "9708:9708"
    restart: unless-stopped

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TZ}
    volumes:
      - ${COMMON_PATH}:/data
      - ${COMMON_PATH}/media/books:/books
      - ./config/readarr:/config
      - ${COMMON_PATH}/qbittorrent/downloads:/downloads
      # - ${COMMON_PATH}/usenet/downloads:/usenet-downloads
      # - ${COMMON_PATH}/usenet/incomplete:/usenet-incomplete-downloads
    ports:
      - 8787:8787
    restart: unless-stopped
  readarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: readarr-exporter
    command: ["readarr"]
    environment:
      PORT: 9713
      URL: "http://readarr:8787" # or; http://readarr:8787
      APIKEY: ${READARR_API_KEY}
#    networks:
#     - your_custom_network # optional
    ports:
      - "9713:9713"
    restart: unless-stopped

  whisparr:
    container_name: whisparr
    image: ghcr.io/hotio/whisparr
    ports:
      - "6969:6969"
    environment:
      - PUID=0
      - PGID=0
      - UMASK=002
      - TZ={TZ}
    volumes:
      - ${COMMON_PATH}:/data
      - ${COMMON_PATH}/media/ram:/ram
      - ./config/whisparr:/config

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TZ}
    ports:
      - 8191:8191
    restart: unless-stopped
  
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TZ}
    volumes:
      - ./config/sabnzbd/config:/config
      - ${COMMON_PATH}:/data
      # - ${COMMON_PATH}/usenet/downloads:/downloads
      # - ${COMMON_PATH}/usenet/incomplete:/incomplete-downloads
    ports:
      - 8081:8080
    restart: unless-stopped
  sabnzbd-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: sabnzbd-exporter
    command: ["sabnzbd"]
    environment:
      PORT: 9711
      URL: "http://sabnzbd:8080" # or; http://sabnzbd:8080
      APIKEY: ${SABNZBD_API_KEY}
#    networks:
#     - your_custom_network # optional
    ports:
     - "9711:9711"
    restart: unless-stopped

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=0
      - PGID=0
      - TZ=${TZ}
    volumes:
      - ./config/bazarr:/config
      - ${COMMON_PATH}:/data
      - ${COMMON_PATH}/media/movies:/movies
      - ${COMMON_PATH}/media/tv:/tv
    ports:
      - 6767:6767
    restart: unless-stopped
  bazarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: bazarr-exporter
    command: ["bazarr"]
    environment:
      PORT: 9712
      URL: "http://bazarr:6767" # or; http://bazarr:6767
      APIKEY: ${BAZARR_API_KEY}
#    networks:
#     - your_custom_network # optional
    ports:
      - "9712:9712"
    restart: unless-stopped
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=7d"  # Keep data for 7 days
      - "--storage.tsdb.retention.size=2GB" # Limit database size to 2GB
    ports:
      - "9090:9090"
    restart: unless-stopped
    # networks:
    #   - monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
volumes:
  prometheus-data: